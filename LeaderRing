import java.io.*;
import java.util.Scanner;

public class LeaderRing {
    static int n;
    static int[] pro = new int[100];  // Process priority
    static int[] sta = new int[100];  // Process status: 1 = alive, 0 = dead
    static int co;                    // Coordinator (final leader)

    public static void main(String args[]) throws IOException {
        Scanner in = new Scanner(System.in);
        System.out.println("----------------------------------------------------------");
        System.out.print("Enter the number of processes: ");
        n = in.nextInt();
        System.out.println("----------------------------------------------------------");

        // Input status and priority of each process
        for (int i = 0; i < n; i++) {
            System.out.println("** For process " + (i + 1) + ":");
            System.out.print("---> Status (1 = alive, 0 = dead): ");
            sta[i] = in.nextInt();
            System.out.print("---> Priority: ");
            pro[i] = in.nextInt();
            System.out.println("===============");
        }

        // Display the ring
        System.out.println("The ring formed is: ");
        for (int i = 1; i <= n; i++) {
            System.out.print(i + " -> ");
        }
        System.out.println("1");
        System.out.println("----------------------------------------------------------");

        System.out.print("Which process will initiate election? : ");
        int ele = in.nextInt(); // 1-based input
        System.out.println("----------------------------------------------------------");

        elect(ele);
        System.out.println("Final coordinator is: Process " + co);
        System.out.println("----------------------------------------------------------");
    }

    static void elect(int ele) {
        int maxPriority = -1;
        int coordinator = -1;

        int i = (ele - 1); // Convert to 0-based index
        int start = i;

        // Traverse the ring once
        do {
            if (sta[i] == 1) { // Only consider alive processes
                System.out.println("Election message passed to Process " + (i + 1) + " (Priority: " + pro[i] + ")");
                if (pro[i] > maxPriority) {
                    maxPriority = pro[i];
                    coordinator = i + 1; // Store 1-based process number
                }
            }
            i = (i + 1) % n; // Move to next in ring (wrap around)
        } while (i != start);

        co = coordinator;
    }
}

--------------------------------------

output :

javac *.java
Inspiron-3584:~/BullyRing/src$ java LeaderRing
----------------------------------------------------------
Enter the number of processes: 4
----------------------------------------------------------
** For process 1:
---> Status (1 = alive, 0 = dead): 1
---> Priority: 3
===============
** For process 2:
---> Status (1 = alive, 0 = dead): 1
---> Priority: 2
===============
** For process 3:
---> Status (1 = alive, 0 = dead): 1
---> Priority: 4
===============
** For process 4:
---> Status (1 = alive, 0 = dead): 1
---> Priority: 1
===============
The ring formed is: 
1 -> 2 -> 3 -> 4 -> 1
----------------------------------------------------------
Which process will initiate election? : 1
----------------------------------------------------------
Election message passed to Process 1 (Priority: 3)
Election message passed to Process 2 (Priority: 2)
Election message passed to Process 3 (Priority: 4)
Election message passed to Process 4 (Priority: 1)
Final coordinator is: Process 3
